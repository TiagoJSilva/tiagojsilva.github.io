<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PKI on Layer9</title>
    <link>/en/sec/pki/</link>
    <description>Recent content in PKI on Layer9</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sat, 11 Jan 2020 14:09:21 +0900</lastBuildDate>
    
        <atom:link href="/en/sec/pki/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>PKI OpenSSL (pt 1)</title>
        <link>/en/sec/pki/opensslpki_1/</link>
        <pubDate>Mon, 20 Sep 2021 01:13:41 +0100</pubDate>
        
        <guid>/en/sec/pki/opensslpki_1/</guid>
        <description>OpenSSL-based PKI (part 1) Sources:
https://openssl-ca.readthedocs.io/en/latest/index.html
https://www.golinuxcloud.com/tutorial-pki-certificates-authority-ocsp/
https://social.technet.microsoft.com/wiki/contents/articles/2900.offline-root-certification-authority-ca.aspx
https://pki-tutorial.readthedocs.io/en/latest/index.html
An airgapped Root CA The system that contains the RootCA is supposed to be airgapped, to be under controlled access, and to be used only for the emission of new CAs and revocation of compromised CAs. In this example, we can put everything on the same server, but one should try to separate the RootCA from the other CAs as much as possible.</description>
      </item>
      
      <item>
        <title>PKI OpenSSL (pt 2)</title>
        <link>/en/sec/pki/opensslpki_2/</link>
        <pubDate>Sun, 03 Oct 2021 18:19:10 +0100</pubDate>
        
        <guid>/en/sec/pki/opensslpki_2/</guid>
        <description>OpenSSL PKI (part 2) - IntermediateCA Creating an IntermediateCA Once again, the intermediateCA(s) must be hosted in a separate system (server) from that which hosts the RootCA, and the RootCA&amp;rsquo;s system (root) should be airgapped and offline. In the online system I don&amp;rsquo;t think it&amp;rsquo;s a bad idea to keep the secondary CAs under /root/ca, which allows the placing the RootCA&amp;rsquo;s certificate on the same path (/root/ca/certs/ca.cert.pem). However, this is the only information from the RootCA that needs to be brought to the online world where the secondary CAs reside; it is even debatable if it is worth bringing the RootCA&amp;rsquo;s CRL in PEM format and putting it in /root/ca/crl/ca.</description>
      </item>
      
      <item>
        <title>PKI OpenSSL (pt 3)</title>
        <link>/en/sec/pki/opensslpki_3/</link>
        <pubDate>Tue, 19 Oct 2021 21:06:37 +0100</pubDate>
        
        <guid>/en/sec/pki/opensslpki_3/</guid>
        <description>Client and Server Certificates Now that we have our IntermediateCA properly configured, we can start using it to issue certificates.
Notes:
 You should use no less than half the bits used on the CA for keys The server&amp;rsquo;s CN should be its FQDN A server certificate needs to have the same FQDN repeated on the SAN information The client certificate&amp;rsquo;s CN can be anything, it&amp;rsquo;s not important. Certificates must be signed by the IntermediateCA Certificates usually last a year (365 days) and the maximum, since July 2019, is 824 days (+1) OpenSSL command for server certificate: -extensions server_cert OpenSSL command for client certificate: -extensions usr_cert Only if copy_extensions = copy or = all is on the [ca_default] section of intermediate/openssl.</description>
      </item>
      
    
  </channel>
</rss>